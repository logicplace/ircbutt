var
	fs = require("fs")
	, jslon = require("jslon")
;

var settings = null;

function getParentProp(x){
	var tmp = this;
	while("_parent" in tmp && !(x in tmp._parent)){
		tmp = tmp._parent;
	}
	if("_parent" in tmp)return this._parent[x];
	else return undefined;
}
function _getParentProp(x){
	return function(){ return getParentProp.call(this,x); }
}

function setSelf(x,y){
	if(x in this)delete this[x];
	this[x] = y;
}
function _setSelf(x){
	return function(y){ return setSelf.call(this,x,y); }
}

function bubblesTo(obj,key){
	//NOTE: This could throw an exception if you don't pass a settings object
	// I don't care about you if you're that stupid
	while(key in obj && obj.__lookupGetter__(key)){
		obj = obj._parent;
	}
	return obj;
}

function loadFile(file){
	fs.readFile(file,function(err,data){
		if(err)throw err;
		var root = jslon.parse(data);
		//Lowest children are most important
		//Trace heirarchy backwards to bubble up
		settings = [];
		function recurse(x,nom){
			x._name = nom;
			if("$" in x){
				x.$._parent = x;
				for(var i in x.$){
					var child = x.$[i];
					for(var j in x){
						//Add a bubbler for attributes the parent has
						// but the child doesn't
						if(j.charAt(0) != "_" && !(j in child)){
							child.__defineGetter__(j,_getParentProp(j));
							child.__defineSetter__(j,_setSelf(j));
						}
					}
					recurse(child,i);
				}
			} else {
				settings.push(x);
			}
		}
		recurse(root,"root");
	});
}

function load(){
	//TODO: Load from database
}

//TODO: Save functions

module.exports = {
	bubblesTo: bubblesTo,
	loadFile: loadFile,
}
