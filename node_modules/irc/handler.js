var
	Class = require("class"),
	proto = require("./proto.js"),
	net = require("net"),
	path = require("path")
;

function findExtra(command){
	for(var i=0;i<proto.extra.length;++i){
		if(command.match(proto.extra[i][0])){
			return proto.extra[i][1];
		}
	}
	return null;
}

function readPacket(base,context){
	//Split args into object
	if("args" in base){
		var extra = findExtra(base.command), extraData
		, msg = inWhichSpec(base.command,context);
		//Find extra (above) and read it etc 
		if(extra){
			extraData = extra.read(base.args);
			if("args" in extraData){
				base.args = extraData.args;
				delete extraData.args;
			} else base.args = "";
		}
		//Split args by msg
		if(base.args)base.args = msg.read(base.args);
		//If it failed or never existed, remove it
		if(!base.args && "args" in base)delete base.args;
		//Add in extra data
		if(extra){
			for(var x in extraData){
				//TODO: Do a check if it already exists?
				base.args[x] = extraData[x];
			}
		}
	}
	return base;
}

function inWhichSpec(command, context){
	var spec = context.spec;
	for(var i=0;i < spec.length && !(command in proto.spec[spec[i]]);++i);
	if(i < spec.length)return proto.spec[spec[i]][command];
	else return null;
}

/*
Class handler(settings)
 - Class to handle an IRC instance, be it one outbound connection or multiple inbound
 - When hosting, events are per server instance
*/
module.exports = Class({
	init: function(){
		this.events = {};
	},
	
	on: function(event,handler){
		this.events[event] = handler;
	},
});
