var
	Class = require("class")
	,proto = require("./proto.js")
	//,settings = require("./settings.js")
;

//TODO: Come up with a context system

function dispatchEvents(events,base){
	//Each event has 5 priority levels	
	if(!(base.command in events))return false;
	var event = events[base.command],ret,ep; //Event[Priority]
	if(base.command in proto){
		var proCom = proto[base.command],msg;
		if("msg" in proCom)msg = proCom.msg;
		else if(settings.spec in proCom && "msg" in proCom[settings.spec]){
			msg = proCom[settings.spec].msg;
		}
		base.args = msg.read(base.args);
	}
	for(var p=0;p<5;++p){ //Priority
		ep = event[p];
		for(var i=0;i<ep.length;++i){
			//NOTE: If a module changes this it changes it for subsequent modules.
			//+Is this bad?
			ep[i][1](base.args);
		}
	}
}

module.exports = Class({
	init: function(conn,server){
		this.conn = conn;
		this.sender = server;
		this.server = (1 in arguments);
		this.readBuffer = "";
		this.writeBuffer = [[],[],[],[],[]];
		this.events = {};
		if(!server) {
			conn.on("connect",this.onConnect);
		}
		conn.on("data",this.onData);
		conn.on("end",this.onEnd);
		conn.on("timeout",this.onTimeout);
		conn.on("drain",this.onDrain);
		conn.on("error",this.onError);
		conn.on("close",this.onClose);
	},
	
	on: function(modName,event,priority,handler){
		if(argumets.length == 2){
			handler = priority;
			priority = 2;
		}
		if(event in proto && event.charAt(0) != "_"){
			if(event in this.events){
				this.events[event][priority].push([modName,handler]);
			} else {
				//Create five priorities
				this.events[event] = [[],[],[],[],[]];
			}
		}
	},
	
	//Socket commands
	send: function(command,data,priority){
		if(command in proto){
			var proCom = proto[base.command],msg;
			if("msg" in proCom)msg = proCom.msg;
			else if(settings.spec in proCom && "msg" in proCom[settings.spec]){
				msg = proCom[settings.spec].msg;
			}
			var mode = this.server?"_server":"_client";
			return this.sendRaw(proto[mode].write({
				sender: this.sender,
				command: command,
				args: msg.write(data)
			},priority);
		}
		return false
	},
	
	sendRaw: function(str,priority){
		//TODO: Split by settings
		if(typeof(priority) == "undefined")priority = 2;
		this.writeBuffer[priority].push(str);
	},
	
	//Socket events
	onConnect: function(){
		//Client only
	},
	
	onData: function(data){
		data = (this.readBuffer+data).split("\r\n");
		this.readBuffer = data.pop();
		var mode = this.server?"_client":"_server";
		for(var i=0;i<data.length;++i){
			var base = proto[mode].read(data[i]);
			if(base == null)continue; //Error stuff
			//var args = proto._args.read(base.args);
			dispatchEvents(this.events,base);
		}
	},
	
	onEnd: function(){
	},
	
	onTimeout: function(){
	},
	
	onDrain: function(){
	},
	
	onError: function(error){
	},
	
	onClose: function(hadError){
	},
});
